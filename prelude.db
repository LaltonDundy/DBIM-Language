export let add : (Int => (Int => Int)) be

    \ n1 : Int ->
    \ n2 : Int -> 
        n1 + n2
in

export let List be 

    \ a : TYPE ->

     @ END ? ( a , (List $ a ) )
in

export let Maybe be

    \ a : TYPE ->
            @ Nothing ? ` Just a

in

export let head be 

    \ a : TYPE ->
    \ lst : (List $ a) ->

        | lst is  @ END -> @ Nothing
        | elsewhere -> ` Just (fst lst)

in

export let tail be 

    \ a : TYPE ->
    \ lst : (List $ a) ->

        | lst is  @ END -> @ Nothing
        | elsewhere -> ` Just (snd lst)

in

export let fac be 

    \  n : Int  -> 

        if n is 1 then  1
        else n * ( fac $ (n - 1)  ) 

in

module Prelude

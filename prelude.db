export let  foo : Int   be 0 in

export let fun be ( Int => Int ) in

export let add : ( Int => ( Int => Int ) ) be
    \ n1 : Int ->
    \ n2 : Int -> 
        n1 + n2
in

export let fac : fun  be 

    \  n : Int  -> 

        if n is 1 then  1
        else n * ( fac $  (n - 1)  ) 

in

export let tup be Pair 1 2 in

module Prelude
